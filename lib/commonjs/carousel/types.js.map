{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import type {\n    StyleProp,\n    ViewStyle,\n    Animated,\n    NativeScrollEvent,\n    NativeSyntheticEvent,\n    FlatListProps,\n    ScrollView,\n    FlatList\n} from 'react-native';\nimport type { ReactNode } from 'react';\n\ntype CarouselBaseProps<TData> = {\n  data: TData[];\n  activeSlideAlignment: 'center' | 'end' | 'start';\n  activeSlideOffset: number;\n  apparitionDelay: number;\n  autoplay: boolean;\n  autoplayDelay: number;\n  autoplayInterval: number;\n  callbackOffsetMargin: number;\n  containerCustomStyle: StyleProp<ViewStyle>;\n  contentContainerCustomStyle: StyleProp<ViewStyle>;\n  enableSnap: boolean;\n  firstItem: number;\n  inactiveSlideOpacity: number;\n  inactiveSlideScale: number;\n  inactiveSlideShift: number;\n  layout: 'default' | 'stack' | 'tinder';\n  layoutCardOffset?: number;\n  loop: boolean;\n  loopClonesPerSide: number;\n  scrollEnabled: boolean;\n  scrollInterpolator?: (index: number, props: CarouselBaseProps<TData>) => {\n    inputRange: number[];\n    outputRange: number[];\n  };\n  slideInterpolatedStyle?: (\n    index: number,\n    animatedValue: Animated.AnimatedInterpolation,\n    props: CarouselBaseProps<TData>\n  ) => StyleProp<ViewStyle>;\n  slideStyle?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  shouldOptimizeUpdates: boolean;\n  useExperimentalSnap: boolean;\n  pagingEnabled: boolean;\n  useScrollView: boolean | React.ComponentType<unknown>;\n  onScroll?: (event: NativeSyntheticEvent<NativeScrollEvent>) => void;\n  onScrollIndexChanged?: (index: number) => void;\n  onSnapToItem?: (index: number) => void;\n};\n\ntype InheritedPropsFromFlatlist<TData> = Pick<\n  FlatListProps<TData>,\n  | 'onTouchStart'\n  | 'onTouchEnd'\n  | 'onMomentumScrollEnd'\n  | 'onLayout'\n  | 'keyExtractor'\n  | 'CellRendererComponent'\n  | 'getItemLayout'\n  | 'style'\n>;\n\ntype VerticalCarouselProps<TData> = {\n  vertical: true;\n  itemHeight: number;\n  sliderHeight: number;\n  renderItem: (\n    baseData: { index: number; dataIndex: number; item: TData },\n    parallaxData: {\n      scrollPosition: Animated.Value | undefined,\n      carouselRef: ScrollView | FlatList<TData> | null,\n      vertical: true,\n      itemHeight: number,\n      sliderHeight: number,\n    }\n  ) => ReactNode;\n};\n\ntype HorizontalCarouselProps<TData> = {\n  vertical: false | undefined;\n  itemWidth: number;\n  sliderWidth: number;\n  renderItem: (\n    baseData: { index: number; dataIndex: number; item: TData },\n    parallaxData: {\n      scrollPosition: Animated.Value | undefined,\n      carouselRef: ScrollView | FlatList<TData> | null,\n      vertical: false,\n      itemWidth: number,\n      sliderWidth: number,\n    }\n  ) => ReactNode;\n};\n\nexport type CarouselProps<TData> = CarouselBaseProps<TData> &\n  (HorizontalCarouselProps<TData> | VerticalCarouselProps<TData>) &\n  InheritedPropsFromFlatlist<TData>;\n\nexport type CarouselState = {\n  hideCarousel: boolean;\n  interpolators: (Animated.Value | Animated.AnimatedInterpolation)[];\n};\n"],"mappings":""}